OOP
- Object (state and behaviour)
- Abstraction, Encapsulation, ..
  abstract keyword

Functional Programming
- Types of functions
  - pure functions
    - function whose result is based on the parameters it takes
  - higher order functions
  	- function which takes another function as a parameter

In Java, we use Functional Interfaces to implement the above concepts
- an interface with only one abstract method

- Lambda expressions
  - Lambda expressions are nothing but anonymous implementations of functional interfaces

JavaScript
----------

//Version 1
setInterval(displayHello, 1000);

displayHello() {
	console.log("Hello");
}


//Version 2
setInterval(function() {
	console.log("Hello");	
}, 1000);

//Version 3
setInterval(()=> {
	console.log("Hello");
}, 10000);

Java
----

//Version 1
class SomeTask implements Runnable {
	
	public void run() {
	  some code here
	}
}

Thread th = new Thread(new SomeTask());
th.start();

//Version 2
Thread th2 = new Thread(new Runnable() {
	public void run() {
	  some code here
	}
});
th2.start();

//Version 3
Thread th3 = new Thread(() -> {
	some code here
});
th3.start();

//Another example. Version 1
class SomeComparator implements Comparator {
	 compare(..) {

	 }
}

Collections.sort(list, new SomeComparator());

//Version 2
Collections.sort(list, new Comparator<Employee>() {
	public int compare(Employee e1, Employee e2) {
	  return e1.getName().compareTo(e2.getName());
	}
})

//Version 3
Collections.sort(list, (e1, e2) => e1.getName().compareTo(e2.getName());

Pure & highjer order functions
int[] arr = {20, 10, 50, 30, 40};
Arrays.sort(arr);
System.out.println(Arrays.toString(arr));

We can say sort function is not a pure function

If this is how the sort function was designed, then it would be a pure one:
int[] anotherArr = Arrays.sort(arr);

A very very very simple example of a pure function in Java can be:
int x = Integer.parseInt("1000");


Generally in OOP, our functions will depend upon the state of an Object,
for ex:
class Account {
	
	int acno;
	double balance;

	withdraw(double amount) {
		balance -= amount;
	}

}